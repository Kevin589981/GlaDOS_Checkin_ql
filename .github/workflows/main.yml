# ================================================================
#  GlaDOS Airport 每日自动签到
#  触发方式：
#    1. 每天 23:00 UTC（北京时间 07:00）定时执行
#    2. 支持手动 workflow_dispatch
# ================================================================
name: "GLADOS airport Checkin"

on:
  schedule:
    - cron: "0 23 * * *"    # 23:00 UTC = 07:00 UTC+8
  workflow_dispatch:

env:
  RUN_ENV: 'prod'

jobs:
  checkin:
    runs-on: ubuntu-latest
    outputs:
      checkin_result: ${{ steps.run_checkin.outputs.checkin_result }}

    steps:
      # -----------------------------------------------------------
      # 1. 拉取代码
      # -----------------------------------------------------------
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -----------------------------------------------------------
      # 2. 安装 Python 并缓存 pip 下载缓存
      #    cache: pip 会把 ~/.cache/pip 存到 GitHub 缓存
      # -----------------------------------------------------------
      - name: Set up Python & cache pip
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt

      # # -----------------------------------------------------------
      # # 3. 额外缓存整个虚拟环境（venv）
      # #    这样即使 pip 缓存失效，也能秒级恢复
      # # -----------------------------------------------------------
      # - name: Cache venv
      #   uses: actions/cache@v4
      #   id: cache-venv
      #   with:
      #     path: ./venv            # 虚拟环境目录
      #     key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}

      # -----------------------------------------------------------
      # 4. 安装依赖
      #    仅在缓存未命中时执行（cache-hit != 'true'）
      # -----------------------------------------------------------
      - name: Install dependencies
        # if: steps.cache-venv.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # -----------------------------------------------------------
      # 5. 随机延迟（避免 7:00 整点并发被风控）
      # -----------------------------------------------------------
      # - name: Random sleep
      #   if: github.event_name == 'schedule'
      #   run: sleep $(shuf -i 10-30 -n 1)

      # -----------------------------------------------------------
      # 6. 执行签到脚本
      # -----------------------------------------------------------
      - name: Run GlaDOS checkin
        id: run_checkin
        env:
          GR_COOKIE: ${{ secrets.GR_COOKIE }}
          cookie1: ${{ secrets.cookie1 }}
        run: |
          # source venv/bin/activate
          python3 ./checkin.py

      # -----------------------------------------------------------
      # 7. 在日志里打印结果
      # -----------------------------------------------------------
      - name: Display checkin results
        run: |
          echo "签到结果："
          echo "${{ steps.run_checkin.outputs.checkin_result }}"

  # =================================================================
  # 通知阶段：无论签到成功 / 失败，都触发通知服务
  # =================================================================
  notify:
    needs: checkin
    runs-on: ubuntu-latest
    if: always() && needs.checkin.result != 'cancelled'

    steps:
      - name: Trigger notification service
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          repository: ${{ secrets.NOTIFICATION_REPO }}
          event-type: send-notification
          client-payload: |
            {
              "title": "GlaDOS签到通知",
              "content": "${{ needs.checkin.outputs.checkin_result || '签到失败，请检查账户信息以及网络环境' }}",
              "source": "glados",
              "timestamp": "${{ github.event.head_commit.timestamp || github.run_id }}"
            }